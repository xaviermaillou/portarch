{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst https = require(\"https\");\n\nconst url = require(\"url\");\n\nconst fs = require(\"fs\");\n\nconst proxyAgent = require(\"proxying-agent\");\n\nconst package_json_1 = require(\"../../package.json\");\n\nconst tinify_1 = require(\"../tinify\");\n\nconst boundaries = /-----BEGIN CERTIFICATE-----[\\s\\S]+?-----END CERTIFICATE-----\\n/g;\nconst data = fs.readFileSync(`${__dirname}/../data/cacert.pem`).toString();\n\nclass Client {\n  /** @internal */\n  constructor(key, appIdentifier, proxy) {\n    const klass = this.constructor;\n    this.userAgent = [klass.USER_AGENT, appIdentifier].filter(Boolean).join(\" \");\n    this.defaultOptions = {\n      ca: klass.CA_BUNDLE,\n      rejectUnauthorized: true,\n      auth: `api:${key}`\n    };\n\n    if (proxy) {\n      if (!url.parse(proxy).hostname) {\n        throw new tinify_1.default.ConnectionError(\"Invalid proxy\");\n      }\n      /* Note: although keepAlive is enabled, the proxy agent reconnects to the\n         proxy server each time. This makes proxied requests slow. There\n         seems to be no proxy tunneling agent that reuses TLS connections. */\n\n\n      this.defaultOptions.agent = proxyAgent.create({\n        proxy,\n        keepAlive: true\n      }, klass.API_ENDPOINT);\n    }\n  }\n  /** @internal */\n\n\n  request(method, path, body) {\n    const klass = this.constructor;\n    const options = url.parse(url.resolve(klass.API_ENDPOINT, path));\n    options.method = method;\n    options.headers = {};\n    Object.assign(options, this.defaultOptions);\n    options.headers[\"User-Agent\"] = this.userAgent;\n\n    if (typeof body === \"object\" && !Buffer.isBuffer(body)) {\n      if (Object.keys(body).length) {\n        /* Encode as JSON. */\n        body = JSON.stringify(body);\n        options.headers[\"Content-Type\"] = \"application/json\";\n        options.headers[\"Content-Length\"] = body.length;\n      } else {\n        /* No options, send without body. */\n        body = undefined;\n      }\n    }\n\n    let retries = klass.RETRY_COUNT + 1;\n    return new Promise((resolve, reject) => {\n      const exec = () => {\n        retries -= 1;\n        const request = https.request(options, response => {\n          const count = response.headers[\"compression-count\"];\n\n          if (count) {\n            tinify_1.default.compressionCount = parseInt(count, 10);\n          }\n\n          const chunks = [];\n          response.on(\"data\", chunk => {\n            chunks.push(chunk);\n          });\n          response.on(\"end\", () => {\n            const body = Buffer.concat(chunks);\n\n            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n              resolve({\n                headers: response.headers,\n                body\n              });\n            } else {\n              let details;\n\n              try {\n                details = JSON.parse(body.toString());\n              } catch (err) {\n                details = {\n                  message: `Error while parsing response: ${err.message}`,\n                  error: \"ParseError\"\n                };\n              }\n\n              if (retries > 0 && response.statusCode && response.statusCode >= 500) {\n                return setTimeout(exec, klass.RETRY_DELAY);\n              }\n\n              reject(tinify_1.default.Error.create(details.message, details.error, response.statusCode));\n            }\n          });\n        });\n        request.on(\"error\", err => {\n          if (retries > 0) {\n            return setTimeout(exec, klass.RETRY_DELAY);\n          }\n\n          reject(new tinify_1.default.ConnectionError(`Error while connecting: ${err.message}`));\n        });\n        request.end(body);\n      };\n\n      exec();\n    });\n  }\n\n}\n/** @internal */\n\n\nClient.API_ENDPOINT = \"https://api.tinify.com\";\n/** @internal */\n\nClient.RETRY_COUNT = 1;\n/** @internal */\n\nClient.RETRY_DELAY = 500;\n/** @internal */\n\nClient.USER_AGENT = `Tinify/${package_json_1.version} Node/${process.versions.node} (${process.platform})`;\n/** @internal */\n\nClient.CA_BUNDLE = data.match(boundaries);\nexports.default = Client;","map":{"version":3,"sources":["/Users/xavier/Documents/DeÃÅveloppement/portarch/node_modules/tinify/lib/tinify/Client.js"],"names":["Object","defineProperty","exports","value","https","require","url","fs","proxyAgent","package_json_1","tinify_1","boundaries","data","readFileSync","__dirname","toString","Client","constructor","key","appIdentifier","proxy","klass","userAgent","USER_AGENT","filter","Boolean","join","defaultOptions","ca","CA_BUNDLE","rejectUnauthorized","auth","parse","hostname","default","ConnectionError","agent","create","keepAlive","API_ENDPOINT","request","method","path","body","options","resolve","headers","assign","Buffer","isBuffer","keys","length","JSON","stringify","undefined","retries","RETRY_COUNT","Promise","reject","exec","response","count","compressionCount","parseInt","chunks","on","chunk","push","concat","statusCode","details","err","message","error","setTimeout","RETRY_DELAY","Error","end","version","process","versions","node","platform","match"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst https = require(\"https\");\nconst url = require(\"url\");\nconst fs = require(\"fs\");\nconst proxyAgent = require(\"proxying-agent\");\nconst package_json_1 = require(\"../../package.json\");\nconst tinify_1 = require(\"../tinify\");\nconst boundaries = /-----BEGIN CERTIFICATE-----[\\s\\S]+?-----END CERTIFICATE-----\\n/g;\nconst data = fs.readFileSync(`${__dirname}/../data/cacert.pem`).toString();\nclass Client {\n    /** @internal */\n    constructor(key, appIdentifier, proxy) {\n        const klass = this.constructor;\n        this.userAgent = [klass.USER_AGENT, appIdentifier].filter(Boolean).join(\" \");\n        this.defaultOptions = {\n            ca: klass.CA_BUNDLE,\n            rejectUnauthorized: true,\n            auth: `api:${key}`,\n        };\n        if (proxy) {\n            if (!url.parse(proxy).hostname) {\n                throw new tinify_1.default.ConnectionError(\"Invalid proxy\");\n            }\n            /* Note: although keepAlive is enabled, the proxy agent reconnects to the\n               proxy server each time. This makes proxied requests slow. There\n               seems to be no proxy tunneling agent that reuses TLS connections. */\n            this.defaultOptions.agent = proxyAgent.create({\n                proxy,\n                keepAlive: true,\n            }, klass.API_ENDPOINT);\n        }\n    }\n    /** @internal */\n    request(method, path, body) {\n        const klass = this.constructor;\n        const options = url.parse(url.resolve(klass.API_ENDPOINT, path));\n        options.method = method;\n        options.headers = {};\n        Object.assign(options, this.defaultOptions);\n        options.headers[\"User-Agent\"] = this.userAgent;\n        if (typeof body === \"object\" && !Buffer.isBuffer(body)) {\n            if (Object.keys(body).length) {\n                /* Encode as JSON. */\n                body = JSON.stringify(body);\n                options.headers[\"Content-Type\"] = \"application/json\";\n                options.headers[\"Content-Length\"] = body.length;\n            }\n            else {\n                /* No options, send without body. */\n                body = undefined;\n            }\n        }\n        let retries = klass.RETRY_COUNT + 1;\n        return new Promise((resolve, reject) => {\n            const exec = () => {\n                retries -= 1;\n                const request = https.request(options, (response) => {\n                    const count = response.headers[\"compression-count\"];\n                    if (count) {\n                        tinify_1.default.compressionCount = parseInt(count, 10);\n                    }\n                    const chunks = [];\n                    response.on(\"data\", (chunk) => {\n                        chunks.push(chunk);\n                    });\n                    response.on(\"end\", () => {\n                        const body = Buffer.concat(chunks);\n                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {\n                            resolve({ headers: response.headers, body });\n                        }\n                        else {\n                            let details;\n                            try {\n                                details = JSON.parse(body.toString());\n                            }\n                            catch (err) {\n                                details = {\n                                    message: `Error while parsing response: ${err.message}`,\n                                    error: \"ParseError\",\n                                };\n                            }\n                            if (retries > 0 && response.statusCode && response.statusCode >= 500) {\n                                return setTimeout(exec, klass.RETRY_DELAY);\n                            }\n                            reject(tinify_1.default.Error.create(details.message, details.error, response.statusCode));\n                        }\n                    });\n                });\n                request.on(\"error\", err => {\n                    if (retries > 0) {\n                        return setTimeout(exec, klass.RETRY_DELAY);\n                    }\n                    reject(new tinify_1.default.ConnectionError(`Error while connecting: ${err.message}`));\n                });\n                request.end(body);\n            };\n            exec();\n        });\n    }\n}\n/** @internal */\nClient.API_ENDPOINT = \"https://api.tinify.com\";\n/** @internal */\nClient.RETRY_COUNT = 1;\n/** @internal */\nClient.RETRY_DELAY = 500;\n/** @internal */\nClient.USER_AGENT = `Tinify/${package_json_1.version} Node/${process.versions.node} (${process.platform})`;\n/** @internal */\nClient.CA_BUNDLE = data.match(boundaries);\nexports.default = Client;\n"]},"metadata":{},"sourceType":"script"}