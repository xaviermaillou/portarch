{"ast":null,"code":"var crypto = require('crypto');\n\nvar flags = {\n  NTLM_NegotiateUnicode: 0x00000001,\n  NTLM_NegotiateOEM: 0x00000002,\n  NTLM_RequestTarget: 0x00000004,\n  NTLM_Unknown9: 0x00000008,\n  NTLM_NegotiateSign: 0x00000010,\n  NTLM_NegotiateSeal: 0x00000020,\n  NTLM_NegotiateDatagram: 0x00000040,\n  NTLM_NegotiateLanManagerKey: 0x00000080,\n  NTLM_Unknown8: 0x00000100,\n  NTLM_NegotiateNTLM: 0x00000200,\n  NTLM_NegotiateNTOnly: 0x00000400,\n  NTLM_Anonymous: 0x00000800,\n  NTLM_NegotiateOemDomainSupplied: 0x00001000,\n  NTLM_NegotiateOemWorkstationSupplied: 0x00002000,\n  NTLM_Unknown6: 0x00004000,\n  NTLM_NegotiateAlwaysSign: 0x00008000,\n  NTLM_TargetTypeDomain: 0x00010000,\n  NTLM_TargetTypeServer: 0x00020000,\n  NTLM_TargetTypeShare: 0x00040000,\n  NTLM_NegotiateExtendedSecurity: 0x00080000,\n  NTLM_NegotiateIdentify: 0x00100000,\n  NTLM_Unknown5: 0x00200000,\n  NTLM_RequestNonNTSessionKey: 0x00400000,\n  NTLM_NegotiateTargetInfo: 0x00800000,\n  NTLM_Unknown4: 0x01000000,\n  NTLM_NegotiateVersion: 0x02000000,\n  NTLM_Unknown3: 0x04000000,\n  NTLM_Unknown2: 0x08000000,\n  NTLM_Unknown1: 0x10000000,\n  NTLM_Negotiate128: 0x20000000,\n  NTLM_NegotiateKeyExchange: 0x40000000,\n  NTLM_Negotiate56: 0x80000000\n};\nvar typeflags = {\n  NTLM_TYPE1_FLAGS: flags.NTLM_NegotiateUnicode + flags.NTLM_NegotiateOEM + flags.NTLM_RequestTarget + flags.NTLM_NegotiateNTLM + flags.NTLM_NegotiateOemDomainSupplied + flags.NTLM_NegotiateOemWorkstationSupplied + flags.NTLM_NegotiateAlwaysSign + flags.NTLM_NegotiateExtendedSecurity + flags.NTLM_NegotiateVersion + flags.NTLM_Negotiate128 + flags.NTLM_Negotiate56,\n  NTLM_TYPE2_FLAGS: flags.NTLM_NegotiateUnicode + flags.NTLM_RequestTarget + flags.NTLM_NegotiateNTLM + flags.NTLM_NegotiateAlwaysSign + flags.NTLM_NegotiateExtendedSecurity + flags.NTLM_NegotiateTargetInfo + flags.NTLM_NegotiateVersion + flags.NTLM_Negotiate128 + flags.NTLM_Negotiate56\n};\n\nfunction createType1Message(options) {\n  var domain = escape(options.domain.toUpperCase());\n  var workstation = escape(options.workstation.toUpperCase());\n  var protocol = 'NTLMSSP\\0';\n  var BODY_LENGTH = 40;\n  var type1flags = typeflags.NTLM_TYPE1_FLAGS;\n  if (!domain || domain == '') type1flags = type1flags - flags.NTLM_NegotiateOemDomainSupplied;\n  var pos = 0;\n  var buf = new Buffer(BODY_LENGTH + domain.length + workstation.length);\n  buf.write(protocol, pos, protocol.length);\n  pos += protocol.length; // protocol\n\n  buf.writeUInt32LE(1, pos);\n  pos += 4; // type 1\n\n  buf.writeUInt32LE(type1flags, pos);\n  pos += 4; // TYPE1 flag\n\n  buf.writeUInt16LE(domain.length, pos);\n  pos += 2; // domain length\n\n  buf.writeUInt16LE(domain.length, pos);\n  pos += 2; // domain max length\n\n  buf.writeUInt32LE(BODY_LENGTH + workstation.length, pos);\n  pos += 4; // domain buffer offset\n\n  buf.writeUInt16LE(workstation.length, pos);\n  pos += 2; // workstation length\n\n  buf.writeUInt16LE(workstation.length, pos);\n  pos += 2; // workstation max length\n\n  buf.writeUInt32LE(BODY_LENGTH, pos);\n  pos += 4; // workstation buffer offset\n\n  buf.writeUInt8(5, pos);\n  pos += 1; //ProductMajorVersion\n\n  buf.writeUInt8(1, pos);\n  pos += 1; //ProductMinorVersion\n\n  buf.writeUInt16LE(2600, pos);\n  pos += 2; //ProductBuild\n\n  buf.writeUInt8(0, pos);\n  pos += 1; //VersionReserved1\n\n  buf.writeUInt8(0, pos);\n  pos += 1; //VersionReserved2\n\n  buf.writeUInt8(0, pos);\n  pos += 1; //VersionReserved3\n\n  buf.writeUInt8(15, pos);\n  pos += 1; //NTLMRevisionCurrent\n\n  buf.write(workstation, pos, workstation.length, 'ascii');\n  pos += workstation.length; // workstation string\n\n  buf.write(domain, pos, domain.length, 'ascii');\n  pos += domain.length;\n  return 'NTLM ' + buf.toString('base64');\n}\n\nfunction parseType2Message(rawmsg, callback) {\n  var match = rawmsg.match(/NTLM (.+)?/);\n  if (!match || !match[1]) return callback(new Error(\"Couldn't find NTLM in the message type2 comming from the server\"));\n  var buf = new Buffer(match[1], 'base64');\n  var msg = {};\n  msg.signature = buf.slice(0, 8);\n  msg.type = buf.readInt16LE(8);\n  if (msg.type != 2) return callback(new Error(\"Server didn't return a type 2 message\"));\n  msg.targetNameLen = buf.readInt16LE(12);\n  msg.targetNameMaxLen = buf.readInt16LE(14);\n  msg.targetNameOffset = buf.readInt32LE(16);\n  msg.targetName = buf.slice(msg.targetNameOffset, msg.targetNameOffset + msg.targetNameMaxLen);\n  msg.negotiateFlags = buf.readInt32LE(20);\n  msg.serverChallenge = buf.slice(24, 32);\n  msg.reserved = buf.slice(32, 40);\n\n  if (msg.negotiateFlags & flags.NTLM_NegotiateTargetInfo) {\n    msg.targetInfoLen = buf.readInt16LE(40);\n    msg.targetInfoMaxLen = buf.readInt16LE(42);\n    msg.targetInfoOffset = buf.readInt32LE(44);\n    msg.targetInfo = buf.slice(msg.targetInfoOffset, msg.targetInfoOffset + msg.targetInfoLen);\n  }\n\n  return msg;\n}\n\nfunction createType3Message(msg2, options) {\n  var nonce = msg2.serverChallenge;\n  var username = options.username;\n  var password = options.password;\n  var negotiateFlags = msg2.negotiateFlags;\n  var isUnicode = negotiateFlags & flags.NTLM_NegotiateUnicode;\n  var isNegotiateExtendedSecurity = negotiateFlags & flags.NTLM_NegotiateExtendedSecurity;\n  var BODY_LENGTH = 72;\n  var domainName = escape(options.domain.toUpperCase());\n  var workstation = escape(options.workstation.toUpperCase());\n  var workstationBytes, domainNameBytes, usernameBytes, encryptedRandomSessionKeyBytes;\n  var encryptedRandomSessionKey = \"\";\n\n  if (isUnicode) {\n    workstationBytes = new Buffer(workstation, 'utf16le');\n    domainNameBytes = new Buffer(domainName, 'utf16le');\n    usernameBytes = new Buffer(username, 'utf16le');\n    encryptedRandomSessionKeyBytes = new Buffer(encryptedRandomSessionKey, 'utf16le');\n  } else {\n    workstationBytes = new Buffer(workstation, 'ascii');\n    domainNameBytes = new Buffer(domainName, 'ascii');\n    usernameBytes = new Buffer(username, 'ascii');\n    encryptedRandomSessionKeyBytes = new Buffer(encryptedRandomSessionKey, 'ascii');\n  }\n\n  var lmChallengeResponse = calc_resp(create_LM_hashed_password_v1(password), nonce);\n  var ntChallengeResponse = calc_resp(create_NT_hashed_password_v1(password), nonce);\n\n  if (isNegotiateExtendedSecurity) {\n    var pwhash = create_NT_hashed_password_v1(password);\n    var clientChallenge = \"\";\n\n    for (var i = 0; i < 8; i++) {\n      clientChallenge += String.fromCharCode(Math.floor(Math.random() * 256));\n    }\n\n    var clientChallengeBytes = new Buffer(clientChallenge, 'ascii');\n    var challenges = ntlm2sr_calc_resp(pwhash, nonce, clientChallengeBytes);\n    lmChallengeResponse = challenges.lmChallengeResponse;\n    ntChallengeResponse = challenges.ntChallengeResponse;\n  }\n\n  var signature = 'NTLMSSP\\0';\n  var pos = 0;\n  var buf = new Buffer(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length + ntChallengeResponse.length + encryptedRandomSessionKeyBytes.length);\n  buf.write(signature, pos, signature.length);\n  pos += signature.length;\n  buf.writeUInt32LE(3, pos);\n  pos += 4; // type 1\n\n  buf.writeUInt16LE(lmChallengeResponse.length, pos);\n  pos += 2; // LmChallengeResponseLen\n\n  buf.writeUInt16LE(lmChallengeResponse.length, pos);\n  pos += 2; // LmChallengeResponseMaxLen\n\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length, pos);\n  pos += 4; // LmChallengeResponseOffset\n\n  buf.writeUInt16LE(ntChallengeResponse.length, pos);\n  pos += 2; // NtChallengeResponseLen\n\n  buf.writeUInt16LE(ntChallengeResponse.length, pos);\n  pos += 2; // NtChallengeResponseMaxLen\n\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length, pos);\n  pos += 4; // NtChallengeResponseOffset\n\n  buf.writeUInt16LE(domainNameBytes.length, pos);\n  pos += 2; // DomainNameLen\n\n  buf.writeUInt16LE(domainNameBytes.length, pos);\n  pos += 2; // DomainNameMaxLen\n\n  buf.writeUInt32LE(BODY_LENGTH, pos);\n  pos += 4; // DomainNameOffset\n\n  buf.writeUInt16LE(usernameBytes.length, pos);\n  pos += 2; // UserNameLen\n\n  buf.writeUInt16LE(usernameBytes.length, pos);\n  pos += 2; // UserNameMaxLen\n\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length, pos);\n  pos += 4; // UserNameOffset\n\n  buf.writeUInt16LE(workstationBytes.length, pos);\n  pos += 2; // WorkstationLen\n\n  buf.writeUInt16LE(workstationBytes.length, pos);\n  pos += 2; // WorkstationMaxLen\n\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length, pos);\n  pos += 4; // WorkstationOffset\n\n  buf.writeUInt16LE(encryptedRandomSessionKeyBytes.length, pos);\n  pos += 2; // EncryptedRandomSessionKeyLen\n\n  buf.writeUInt16LE(encryptedRandomSessionKeyBytes.length, pos);\n  pos += 2; // EncryptedRandomSessionKeyMaxLen\n\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length + ntChallengeResponse.length, pos);\n  pos += 4; // EncryptedRandomSessionKeyOffset\n\n  buf.writeUInt32LE(typeflags.NTLM_TYPE2_FLAGS, pos);\n  pos += 4; // NegotiateFlags\n\n  buf.writeUInt8(5, pos);\n  pos++; // ProductMajorVersion\n\n  buf.writeUInt8(1, pos);\n  pos++; // ProductMinorVersion\n\n  buf.writeUInt16LE(2600, pos);\n  pos += 2; // ProductBuild\n\n  buf.writeUInt8(0, pos);\n  pos++; // VersionReserved1\n\n  buf.writeUInt8(0, pos);\n  pos++; // VersionReserved2\n\n  buf.writeUInt8(0, pos);\n  pos++; // VersionReserved3\n\n  buf.writeUInt8(15, pos);\n  pos++; // NTLMRevisionCurrent\n\n  domainNameBytes.copy(buf, pos);\n  pos += domainNameBytes.length;\n  usernameBytes.copy(buf, pos);\n  pos += usernameBytes.length;\n  workstationBytes.copy(buf, pos);\n  pos += workstationBytes.length;\n  lmChallengeResponse.copy(buf, pos);\n  pos += lmChallengeResponse.length;\n  ntChallengeResponse.copy(buf, pos);\n  pos += ntChallengeResponse.length;\n  encryptedRandomSessionKeyBytes.copy(buf, pos);\n  pos += encryptedRandomSessionKeyBytes.length;\n  return 'NTLM ' + buf.toString('base64');\n}\n\nfunction create_LM_hashed_password_v1(password) {\n  // fix the password length to 14 bytes\n  var password = password.toUpperCase();\n  var passwordBytes = new Buffer(password, 'ascii');\n  var passwordBytesPadded = new Buffer(14);\n  passwordBytesPadded.fill(\"\\0\");\n  var sourceEnd = 14;\n  if (passwordBytes.length < 14) sourceEnd = passwordBytes.length;\n  passwordBytes.copy(passwordBytesPadded, 0, 0, sourceEnd); // split into 2 parts of 7 bytes:\n\n  var firstPart = passwordBytesPadded.slice(0, 7);\n  var secondPart = passwordBytesPadded.slice(7);\n\n  function encrypt(buf) {\n    var key = insertZerosEvery7Bits(buf);\n    var des = crypto.createCipheriv('DES-ECB', key, '');\n    return des.update(\"KGS!@#$%\"); // page 57 in [MS-NLMP]);\n  }\n\n  var firstPartEncrypted = encrypt(firstPart);\n  var secondPartEncrypted = encrypt(secondPart);\n  return Buffer.concat([firstPartEncrypted, secondPartEncrypted]);\n}\n\nfunction insertZerosEvery7Bits(buf) {\n  var binaryArray = bytes2binaryArray(buf);\n  var newBinaryArray = [];\n\n  for (var i = 0; i < binaryArray.length; i++) {\n    newBinaryArray.push(binaryArray[i]);\n\n    if ((i + 1) % 7 == 0) {\n      newBinaryArray.push(0);\n    }\n  }\n\n  return binaryArray2bytes(newBinaryArray);\n}\n\nfunction bytes2binaryArray(buf) {\n  var hex2binary = {\n    0: [0, 0, 0, 0],\n    1: [0, 0, 0, 1],\n    2: [0, 0, 1, 0],\n    3: [0, 0, 1, 1],\n    4: [0, 1, 0, 0],\n    5: [0, 1, 0, 1],\n    6: [0, 1, 1, 0],\n    7: [0, 1, 1, 1],\n    8: [1, 0, 0, 0],\n    9: [1, 0, 0, 1],\n    A: [1, 0, 1, 0],\n    B: [1, 0, 1, 1],\n    C: [1, 1, 0, 0],\n    D: [1, 1, 0, 1],\n    E: [1, 1, 1, 0],\n    F: [1, 1, 1, 1]\n  };\n  var hexString = buf.toString('hex').toUpperCase();\n  var array = [];\n\n  for (var i = 0; i < hexString.length; i++) {\n    var hexchar = hexString.charAt(i);\n    array = array.concat(hex2binary[hexchar]);\n  }\n\n  return array;\n}\n\nfunction binaryArray2bytes(array) {\n  var binary2hex = {\n    '0000': 0,\n    '0001': 1,\n    '0010': 2,\n    '0011': 3,\n    '0100': 4,\n    '0101': 5,\n    '0110': 6,\n    '0111': 7,\n    '1000': 8,\n    '1001': 9,\n    '1010': 'A',\n    '1011': 'B',\n    '1100': 'C',\n    '1101': 'D',\n    '1110': 'E',\n    '1111': 'F'\n  };\n  var bufArray = [];\n\n  for (var i = 0; i < array.length; i += 8) {\n    if (i + 7 > array.length) break;\n    var binString1 = '' + array[i] + '' + array[i + 1] + '' + array[i + 2] + '' + array[i + 3];\n    var binString2 = '' + array[i + 4] + '' + array[i + 5] + '' + array[i + 6] + '' + array[i + 7];\n    var hexchar1 = binary2hex[binString1];\n    var hexchar2 = binary2hex[binString2];\n    var buf = new Buffer(hexchar1 + '' + hexchar2, 'hex');\n    bufArray.push(buf);\n  }\n\n  return Buffer.concat(bufArray);\n}\n\nfunction create_NT_hashed_password_v1(password) {\n  var buf = new Buffer(password, 'utf16le');\n  var md4 = crypto.createHash('md4');\n  md4.update(buf);\n  return new Buffer(md4.digest());\n}\n\nfunction calc_resp(password_hash, server_challenge) {\n  // padding with zeros to make the hash 21 bytes long\n  var passHashPadded = new Buffer(21);\n  passHashPadded.fill(\"\\0\");\n  password_hash.copy(passHashPadded, 0, 0, password_hash.length);\n  var resArray = [];\n  var des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(0, 7)), '');\n  resArray.push(des.update(server_challenge.slice(0, 8)));\n  var des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(7, 14)), '');\n  resArray.push(des.update(server_challenge.slice(0, 8)));\n  var des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(14, 21)), '');\n  resArray.push(des.update(server_challenge.slice(0, 8)));\n  return Buffer.concat(resArray);\n}\n\nfunction ntlm2sr_calc_resp(responseKeyNT, serverChallenge, clientChallenge) {\n  // padding with zeros to make the hash 16 bytes longer\n  var lmChallengeResponse = new Buffer(clientChallenge.length + 16);\n  lmChallengeResponse.fill(\"\\0\");\n  clientChallenge.copy(lmChallengeResponse, 0, 0, clientChallenge.length);\n  var buf = Buffer.concat([serverChallenge, clientChallenge]);\n  var md5 = crypto.createHash('md5');\n  md5.update(buf);\n  var sess = md5.digest();\n  var ntChallengeResponse = calc_resp(responseKeyNT, sess.slice(0, 8));\n  return {\n    lmChallengeResponse: lmChallengeResponse,\n    ntChallengeResponse: ntChallengeResponse\n  };\n}\n\nexports.createType1Message = createType1Message;\nexports.parseType2Message = parseType2Message;\nexports.createType3Message = createType3Message;","map":{"version":3,"sources":["/Users/xavier/Documents/Développement/portarch/node_modules/proxying-agent/lib/ntlm.js"],"names":["crypto","require","flags","NTLM_NegotiateUnicode","NTLM_NegotiateOEM","NTLM_RequestTarget","NTLM_Unknown9","NTLM_NegotiateSign","NTLM_NegotiateSeal","NTLM_NegotiateDatagram","NTLM_NegotiateLanManagerKey","NTLM_Unknown8","NTLM_NegotiateNTLM","NTLM_NegotiateNTOnly","NTLM_Anonymous","NTLM_NegotiateOemDomainSupplied","NTLM_NegotiateOemWorkstationSupplied","NTLM_Unknown6","NTLM_NegotiateAlwaysSign","NTLM_TargetTypeDomain","NTLM_TargetTypeServer","NTLM_TargetTypeShare","NTLM_NegotiateExtendedSecurity","NTLM_NegotiateIdentify","NTLM_Unknown5","NTLM_RequestNonNTSessionKey","NTLM_NegotiateTargetInfo","NTLM_Unknown4","NTLM_NegotiateVersion","NTLM_Unknown3","NTLM_Unknown2","NTLM_Unknown1","NTLM_Negotiate128","NTLM_NegotiateKeyExchange","NTLM_Negotiate56","typeflags","NTLM_TYPE1_FLAGS","NTLM_TYPE2_FLAGS","createType1Message","options","domain","escape","toUpperCase","workstation","protocol","BODY_LENGTH","type1flags","pos","buf","Buffer","length","write","writeUInt32LE","writeUInt16LE","writeUInt8","toString","parseType2Message","rawmsg","callback","match","Error","msg","signature","slice","type","readInt16LE","targetNameLen","targetNameMaxLen","targetNameOffset","readInt32LE","targetName","negotiateFlags","serverChallenge","reserved","targetInfoLen","targetInfoMaxLen","targetInfoOffset","targetInfo","createType3Message","msg2","nonce","username","password","isUnicode","isNegotiateExtendedSecurity","domainName","workstationBytes","domainNameBytes","usernameBytes","encryptedRandomSessionKeyBytes","encryptedRandomSessionKey","lmChallengeResponse","calc_resp","create_LM_hashed_password_v1","ntChallengeResponse","create_NT_hashed_password_v1","pwhash","clientChallenge","i","String","fromCharCode","Math","floor","random","clientChallengeBytes","challenges","ntlm2sr_calc_resp","copy","passwordBytes","passwordBytesPadded","fill","sourceEnd","firstPart","secondPart","encrypt","key","insertZerosEvery7Bits","des","createCipheriv","update","firstPartEncrypted","secondPartEncrypted","concat","binaryArray","bytes2binaryArray","newBinaryArray","push","binaryArray2bytes","hex2binary","A","B","C","D","E","F","hexString","array","hexchar","charAt","binary2hex","bufArray","binString1","binString2","hexchar1","hexchar2","md4","createHash","digest","password_hash","server_challenge","passHashPadded","resArray","responseKeyNT","md5","sess","exports"],"mappings":"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","sourcesContent":["var crypto = require('crypto');\n\nvar flags = {\n  NTLM_NegotiateUnicode                :  0x00000001,\n  NTLM_NegotiateOEM                    :  0x00000002,\n  NTLM_RequestTarget                   :  0x00000004,\n  NTLM_Unknown9                        :  0x00000008,\n  NTLM_NegotiateSign                   :  0x00000010,\n  NTLM_NegotiateSeal                   :  0x00000020,\n  NTLM_NegotiateDatagram               :  0x00000040,\n  NTLM_NegotiateLanManagerKey          :  0x00000080,\n  NTLM_Unknown8                        :  0x00000100,\n  NTLM_NegotiateNTLM                   :  0x00000200,\n  NTLM_NegotiateNTOnly                 :  0x00000400,\n  NTLM_Anonymous                       :  0x00000800,\n  NTLM_NegotiateOemDomainSupplied      :  0x00001000,\n  NTLM_NegotiateOemWorkstationSupplied :  0x00002000,\n  NTLM_Unknown6                        :  0x00004000,\n  NTLM_NegotiateAlwaysSign             :  0x00008000,\n  NTLM_TargetTypeDomain                :  0x00010000,\n  NTLM_TargetTypeServer                :  0x00020000,\n  NTLM_TargetTypeShare                 :  0x00040000,\n  NTLM_NegotiateExtendedSecurity       :  0x00080000,\n  NTLM_NegotiateIdentify               :  0x00100000,\n  NTLM_Unknown5                        :  0x00200000,\n  NTLM_RequestNonNTSessionKey          :  0x00400000,\n  NTLM_NegotiateTargetInfo             :  0x00800000,\n  NTLM_Unknown4                        :  0x01000000,\n  NTLM_NegotiateVersion                :  0x02000000,\n  NTLM_Unknown3                        :  0x04000000,\n  NTLM_Unknown2                        :  0x08000000,\n  NTLM_Unknown1                        :  0x10000000,\n  NTLM_Negotiate128                    :  0x20000000,\n  NTLM_NegotiateKeyExchange            :  0x40000000,\n  NTLM_Negotiate56                     :  0x80000000\n}\nvar typeflags = {\n  NTLM_TYPE1_FLAGS : \t  flags.NTLM_NegotiateUnicode\n    + flags.NTLM_NegotiateOEM\n    + flags.NTLM_RequestTarget\n    + flags.NTLM_NegotiateNTLM\n    + flags.NTLM_NegotiateOemDomainSupplied\n    + flags.NTLM_NegotiateOemWorkstationSupplied\n    + flags.NTLM_NegotiateAlwaysSign\n    + flags.NTLM_NegotiateExtendedSecurity\n    + flags.NTLM_NegotiateVersion\n    + flags.NTLM_Negotiate128\n    + flags.NTLM_Negotiate56,\n\n  NTLM_TYPE2_FLAGS :    flags.NTLM_NegotiateUnicode\n    + flags.NTLM_RequestTarget\n    + flags.NTLM_NegotiateNTLM\n    + flags.NTLM_NegotiateAlwaysSign\n    + flags.NTLM_NegotiateExtendedSecurity\n    + flags.NTLM_NegotiateTargetInfo\n    + flags.NTLM_NegotiateVersion\n    + flags.NTLM_Negotiate128\n    + flags.NTLM_Negotiate56\n}\n\nfunction createType1Message(options){\n  var domain = escape(options.domain.toUpperCase());\n  var workstation = escape(options.workstation.toUpperCase());\n  var protocol = 'NTLMSSP\\0';\n\n  var BODY_LENGTH = 40;\n\n  var type1flags = typeflags.NTLM_TYPE1_FLAGS;\n  if(!domain || domain == '')\n    type1flags = type1flags - flags.NTLM_NegotiateOemDomainSupplied;\n\n  var pos = 0;\n  var buf = new Buffer(BODY_LENGTH + domain.length + workstation.length);\n\n\n  buf.write(protocol, pos, protocol.length); pos += protocol.length; // protocol\n  buf.writeUInt32LE(1, pos); pos += 4;          // type 1\n  buf.writeUInt32LE(type1flags, pos); pos += 4; // TYPE1 flag\n\n  buf.writeUInt16LE(domain.length, pos); pos += 2; // domain length\n  buf.writeUInt16LE(domain.length, pos); pos += 2; // domain max length\n  buf.writeUInt32LE(BODY_LENGTH + workstation.length, pos); pos += 4; // domain buffer offset\n\n  buf.writeUInt16LE(workstation.length, pos); pos += 2; // workstation length\n  buf.writeUInt16LE(workstation.length, pos); pos += 2; // workstation max length\n  buf.writeUInt32LE(BODY_LENGTH, pos); pos += 4; // workstation buffer offset\n\n  buf.writeUInt8(5, pos); pos += 1;      //ProductMajorVersion\n  buf.writeUInt8(1, pos); pos += 1;      //ProductMinorVersion\n  buf.writeUInt16LE(2600, pos); pos += 2; //ProductBuild\n\n  buf.writeUInt8(0 , pos); pos += 1; //VersionReserved1\n  buf.writeUInt8(0 , pos); pos += 1; //VersionReserved2\n  buf.writeUInt8(0 , pos); pos += 1; //VersionReserved3\n  buf.writeUInt8(15, pos); pos += 1; //NTLMRevisionCurrent\n\n  buf.write(workstation, pos, workstation.length, 'ascii'); pos += workstation.length; // workstation string\n  buf.write(domain     , pos, domain.length     , 'ascii'); pos += domain.length;\n\n  return 'NTLM ' + buf.toString('base64');\n}\n\nfunction parseType2Message(rawmsg, callback){\n  var match = rawmsg.match(/NTLM (.+)?/);\n  if(!match || !match[1])\n    return callback(new Error(\"Couldn't find NTLM in the message type2 comming from the server\"));\n\n  var buf = new Buffer(match[1], 'base64');\n\n  var msg = {};\n\n  msg.signature = buf.slice(0, 8);\n  msg.type = buf.readInt16LE(8);\n\n  if(msg.type != 2)\n    return callback(new Error(\"Server didn't return a type 2 message\"));\n\n  msg.targetNameLen = buf.readInt16LE(12);\n  msg.targetNameMaxLen = buf.readInt16LE(14);\n  msg.targetNameOffset = buf.readInt32LE(16);\n  msg.targetName  = buf.slice(msg.targetNameOffset, msg.targetNameOffset + msg.targetNameMaxLen);\n\n  msg.negotiateFlags = buf.readInt32LE(20);\n  msg.serverChallenge = buf.slice(24, 32);\n  msg.reserved = buf.slice(32, 40);\n\n  if(msg.negotiateFlags & flags.NTLM_NegotiateTargetInfo){\n    msg.targetInfoLen = buf.readInt16LE(40);\n    msg.targetInfoMaxLen = buf.readInt16LE(42);\n    msg.targetInfoOffset = buf.readInt32LE(44);\n    msg.targetInfo = buf.slice(msg.targetInfoOffset, msg.targetInfoOffset + msg.targetInfoLen);\n  }\n  return msg;\n}\n\nfunction createType3Message(msg2, options){\n  var nonce = msg2.serverChallenge;\n  var username = options.username;\n  var password = options.password;\n  var negotiateFlags = msg2.negotiateFlags;\n\n  var isUnicode = negotiateFlags & flags.NTLM_NegotiateUnicode;\n  var isNegotiateExtendedSecurity = negotiateFlags & flags.NTLM_NegotiateExtendedSecurity;\n\n  var BODY_LENGTH = 72;\n\n  var domainName = escape(options.domain.toUpperCase());\n  var workstation = escape(options.workstation.toUpperCase());\n\n  var workstationBytes, domainNameBytes, usernameBytes, encryptedRandomSessionKeyBytes;\n\n  var encryptedRandomSessionKey = \"\";\n  if(isUnicode){\n    workstationBytes = new Buffer(workstation, 'utf16le');\n    domainNameBytes = new Buffer(domainName, 'utf16le');\n    usernameBytes = new Buffer(username, 'utf16le');\n    encryptedRandomSessionKeyBytes = new Buffer(encryptedRandomSessionKey, 'utf16le');\n  }else{\n    workstationBytes = new Buffer(workstation, 'ascii');\n    domainNameBytes = new Buffer(domainName, 'ascii');\n    usernameBytes = new Buffer(username, 'ascii');\n    encryptedRandomSessionKeyBytes = new Buffer(encryptedRandomSessionKey, 'ascii');\n  }\n\n  var lmChallengeResponse = calc_resp(create_LM_hashed_password_v1(password), nonce);\n  var ntChallengeResponse = calc_resp(create_NT_hashed_password_v1(password), nonce);\n\n  if(isNegotiateExtendedSecurity){\n    var pwhash = create_NT_hashed_password_v1(password);\n    var clientChallenge = \"\";\n    for(var i=0; i < 8; i++){\n      clientChallenge += String.fromCharCode( Math.floor(Math.random()*256) );\n    }\n    var clientChallengeBytes = new Buffer(clientChallenge, 'ascii');\n    var challenges = ntlm2sr_calc_resp(pwhash, nonce, clientChallengeBytes);\n    lmChallengeResponse = challenges.lmChallengeResponse;\n    ntChallengeResponse = challenges.ntChallengeResponse;\n  }\n\n  var signature = 'NTLMSSP\\0';\n\n  var pos = 0;\n  var buf = new Buffer(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length + ntChallengeResponse.length + encryptedRandomSessionKeyBytes.length);\n\n  buf.write(signature, pos, signature.length); pos += signature.length;\n  buf.writeUInt32LE(3, pos); pos += 4;          // type 1\n\n  buf.writeUInt16LE(lmChallengeResponse.length, pos); pos += 2; // LmChallengeResponseLen\n  buf.writeUInt16LE(lmChallengeResponse.length, pos); pos += 2; // LmChallengeResponseMaxLen\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length, pos); pos += 4; // LmChallengeResponseOffset\n\n  buf.writeUInt16LE(ntChallengeResponse.length, pos); pos += 2; // NtChallengeResponseLen\n  buf.writeUInt16LE(ntChallengeResponse.length, pos); pos += 2; // NtChallengeResponseMaxLen\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length, pos); pos += 4; // NtChallengeResponseOffset\n\n  buf.writeUInt16LE(domainNameBytes.length, pos); pos += 2; // DomainNameLen\n  buf.writeUInt16LE(domainNameBytes.length, pos); pos += 2; // DomainNameMaxLen\n  buf.writeUInt32LE(BODY_LENGTH, pos); pos += 4; \t\t\t  // DomainNameOffset\n\n  buf.writeUInt16LE(usernameBytes.length, pos); pos += 2; // UserNameLen\n  buf.writeUInt16LE(usernameBytes.length, pos); pos += 2; // UserNameMaxLen\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length, pos); pos += 4; // UserNameOffset\n\n  buf.writeUInt16LE(workstationBytes.length, pos); pos += 2; // WorkstationLen\n  buf.writeUInt16LE(workstationBytes.length, pos); pos += 2; // WorkstationMaxLen\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length, pos); pos += 4; // WorkstationOffset\n\n  buf.writeUInt16LE(encryptedRandomSessionKeyBytes.length, pos); pos += 2; // EncryptedRandomSessionKeyLen\n  buf.writeUInt16LE(encryptedRandomSessionKeyBytes.length, pos); pos += 2; // EncryptedRandomSessionKeyMaxLen\n  buf.writeUInt32LE(BODY_LENGTH + domainNameBytes.length + usernameBytes.length + workstationBytes.length + lmChallengeResponse.length + ntChallengeResponse.length, pos); pos += 4; // EncryptedRandomSessionKeyOffset\n\n  buf.writeUInt32LE(typeflags.NTLM_TYPE2_FLAGS, pos); pos += 4; // NegotiateFlags\n\n  buf.writeUInt8(5, pos); pos++; // ProductMajorVersion\n  buf.writeUInt8(1, pos); pos++; // ProductMinorVersion\n  buf.writeUInt16LE(2600, pos); pos += 2; // ProductBuild\n  buf.writeUInt8(0, pos); pos++; // VersionReserved1\n  buf.writeUInt8(0, pos); pos++; // VersionReserved2\n  buf.writeUInt8(0, pos); pos++; // VersionReserved3\n  buf.writeUInt8(15, pos); pos++; // NTLMRevisionCurrent\n\n  domainNameBytes.copy(buf, pos); pos += domainNameBytes.length;\n  usernameBytes.copy(buf, pos); pos += usernameBytes.length;\n  workstationBytes.copy(buf, pos); pos += workstationBytes.length;\n  lmChallengeResponse.copy(buf, pos); pos += lmChallengeResponse.length;\n  ntChallengeResponse.copy(buf, pos); pos += ntChallengeResponse.length;\n  encryptedRandomSessionKeyBytes.copy(buf, pos); pos += encryptedRandomSessionKeyBytes.length;\n\n  return 'NTLM ' + buf.toString('base64');\n}\n\nfunction create_LM_hashed_password_v1(password){\n  // fix the password length to 14 bytes\n  var password = password.toUpperCase();\n  var passwordBytes = new Buffer(password, 'ascii');\n\n  var passwordBytesPadded = new Buffer(14);\n  passwordBytesPadded.fill(\"\\0\");\n  var sourceEnd = 14;\n  if(passwordBytes.length < 14) sourceEnd = passwordBytes.length;\n  passwordBytes.copy(passwordBytesPadded, 0, 0, sourceEnd);\n\n  // split into 2 parts of 7 bytes:\n  var firstPart = passwordBytesPadded.slice(0,7);\n  var secondPart = passwordBytesPadded.slice(7);\n\n  function encrypt(buf){\n    var key = insertZerosEvery7Bits(buf);\n    var des = crypto.createCipheriv('DES-ECB', key, '');\n    return des.update(\"KGS!@#$%\"); // page 57 in [MS-NLMP]);\n  }\n\n  var firstPartEncrypted = encrypt(firstPart);\n  var secondPartEncrypted = encrypt(secondPart);\n\n  return Buffer.concat([firstPartEncrypted, secondPartEncrypted]);\n}\n\nfunction insertZerosEvery7Bits(buf){\n  var binaryArray = bytes2binaryArray(buf);\n  var newBinaryArray = [];\n  for(var i=0; i<binaryArray.length; i++){\n    newBinaryArray.push(binaryArray[i]);\n\n    if((i+1)%7 == 0){\n      newBinaryArray.push(0);\n    }\n  }\n  return binaryArray2bytes(newBinaryArray);\n}\n\nfunction bytes2binaryArray(buf){\n  var hex2binary = {\n    0: [0,0,0,0],\n    1: [0,0,0,1],\n    2: [0,0,1,0],\n    3: [0,0,1,1],\n    4: [0,1,0,0],\n    5: [0,1,0,1],\n    6: [0,1,1,0],\n    7: [0,1,1,1],\n    8: [1,0,0,0],\n    9: [1,0,0,1],\n    A: [1,0,1,0],\n    B: [1,0,1,1],\n    C: [1,1,0,0],\n    D: [1,1,0,1],\n    E: [1,1,1,0],\n    F: [1,1,1,1]\n  };\n\n  var hexString = buf.toString('hex').toUpperCase();\n  var array = [];\n  for(var i=0; i<hexString.length; i++){\n    var hexchar = hexString.charAt(i);\n    array = array.concat(hex2binary[hexchar]);\n  }\n  return array;\n}\n\nfunction binaryArray2bytes(array){\n  var binary2hex = {\n    '0000': 0,\n    '0001': 1,\n    '0010': 2,\n    '0011': 3,\n    '0100': 4,\n    '0101': 5,\n    '0110': 6,\n    '0111': 7,\n    '1000': 8,\n    '1001': 9,\n    '1010': 'A',\n    '1011': 'B',\n    '1100': 'C',\n    '1101': 'D',\n    '1110': 'E',\n    '1111': 'F'\n  }\n\n  var bufArray = [];\n\n  for(var i=0; i<array.length; i +=8 ){\n    if((i+7) > array.length)\n      break;\n\n    var binString1 = '' + array[i] + '' + array[i+1] + '' + array[i+2] + '' + array[i+3];\n    var binString2 = '' + array[i+4] + '' + array[i+5] + '' + array[i+6] + '' + array[i+7];\n    var hexchar1 = binary2hex[binString1];\n    var hexchar2 = binary2hex[binString2];\n\n    var buf = new Buffer(hexchar1 + '' + hexchar2, 'hex');\n    bufArray.push(buf);\n  }\n\n  return Buffer.concat(bufArray);\n}\n\nfunction create_NT_hashed_password_v1(password){\n  var buf = new Buffer(password, 'utf16le');\n  var md4 = crypto.createHash('md4');\n  md4.update(buf);\n  return new Buffer(md4.digest());\n}\n\nfunction calc_resp(password_hash, server_challenge){\n  // padding with zeros to make the hash 21 bytes long\n  var passHashPadded = new Buffer(21);\n  passHashPadded.fill(\"\\0\");\n  password_hash.copy(passHashPadded, 0, 0, password_hash.length);\n\n  var resArray = [];\n\n  var des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(0,7)), '');\n  resArray.push( des.update(server_challenge.slice(0,8)) );\n\n  var des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(7,14)), '');\n  resArray.push( des.update(server_challenge.slice(0,8)) );\n\n  var des = crypto.createCipheriv('DES-ECB', insertZerosEvery7Bits(passHashPadded.slice(14,21)), '');\n  resArray.push( des.update(server_challenge.slice(0,8)) );\n\n  return Buffer.concat(resArray);\n}\n\nfunction ntlm2sr_calc_resp(responseKeyNT, serverChallenge, clientChallenge){\n  // padding with zeros to make the hash 16 bytes longer\n  var lmChallengeResponse = new Buffer(clientChallenge.length + 16);\n  lmChallengeResponse.fill(\"\\0\");\n  clientChallenge.copy(lmChallengeResponse, 0, 0, clientChallenge.length);\n\n  var buf = Buffer.concat([serverChallenge, clientChallenge]);\n  var md5 = crypto.createHash('md5');\n  md5.update(buf);\n  var sess = md5.digest();\n  var ntChallengeResponse = calc_resp(responseKeyNT, sess.slice(0,8));\n\n  return {\n    lmChallengeResponse: lmChallengeResponse,\n    ntChallengeResponse: ntChallengeResponse\n  }\n}\n\nexports.createType1Message = createType1Message;\nexports.parseType2Message = parseType2Message;\nexports.createType3Message = createType3Message;\n"]},"metadata":{},"sourceType":"script"}