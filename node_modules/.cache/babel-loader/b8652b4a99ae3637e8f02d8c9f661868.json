{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs\");\n/** @internal */\n\n\nfunction promisify(fn) {\n  return function () {\n    const args = Array.from(arguments);\n    return new Promise((resolve, reject) => {\n      args.push((err, value) => {\n        if (err) return reject(err);\n        resolve(value);\n      });\n      fn.apply(undefined, args);\n    });\n  };\n}\n/** @internal */\n\n\nexports.readFile = promisify(fs.readFile);\n/** @internal */\n\nexports.writeFile = promisify(fs.writeFile);\n/** @internal */\n\nconst nodeify = require(\"promise-nodeify\");\n\nexports.nodeify = nodeify;","map":{"version":3,"sources":["/Users/xavier/Documents/Développement/portarch/node_modules/tinify/lib/tinify/compat.js"],"names":["Object","defineProperty","exports","value","fs","require","promisify","fn","args","Array","from","arguments","Promise","resolve","reject","push","err","apply","undefined","readFile","writeFile","nodeify"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;AACA;;;AACA,SAASC,SAAT,CAAmBC,EAAnB,EAAuB;AACnB,SAAO,YAAY;AACf,UAAMC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWC,SAAX,CAAb;AACA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCN,MAAAA,IAAI,CAACO,IAAL,CAAU,CAACC,GAAD,EAAMb,KAAN,KAAgB;AACtB,YAAIa,GAAJ,EACI,OAAOF,MAAM,CAACE,GAAD,CAAb;AACJH,QAAAA,OAAO,CAACV,KAAD,CAAP;AACH,OAJD;AAKAI,MAAAA,EAAE,CAACU,KAAH,CAASC,SAAT,EAAoBV,IAApB;AACH,KAPM,CAAP;AAQH,GAVD;AAWH;AACD;;;AACAN,OAAO,CAACiB,QAAR,GAAmBb,SAAS,CAACF,EAAE,CAACe,QAAJ,CAA5B;AACA;;AACAjB,OAAO,CAACkB,SAAR,GAAoBd,SAAS,CAACF,EAAE,CAACgB,SAAJ,CAA7B;AACA;;AACA,MAAMC,OAAO,GAAGhB,OAAO,CAAC,iBAAD,CAAvB;;AACAH,OAAO,CAACmB,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\n/** @internal */\nfunction promisify(fn) {\n    return function () {\n        const args = Array.from(arguments);\n        return new Promise((resolve, reject) => {\n            args.push((err, value) => {\n                if (err)\n                    return reject(err);\n                resolve(value);\n            });\n            fn.apply(undefined, args);\n        });\n    };\n}\n/** @internal */\nexports.readFile = promisify(fs.readFile);\n/** @internal */\nexports.writeFile = promisify(fs.writeFile);\n/** @internal */\nconst nodeify = require(\"promise-nodeify\");\nexports.nodeify = nodeify;\n"]},"metadata":{},"sourceType":"script"}